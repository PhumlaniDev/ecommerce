name: test-build-package

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        env:
          POSTGRES_DB: store
          POSTGRES_USER: phumlanidev
          POSTGRES_PASSWORD: Chr1st1@n9432

    env:
      SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/store
      SPRING_DATASOURCE_USERNAME: phumlanidev
      SPRING_DATASOURCE_PASSWORD: Chr1st1@n9432

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'zulu'

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Wait for PostgreSQL to be ready
        run: |
          echo "Waiting for PostgreSQL to be ready..."
          until pg_isready -h localhost -p 5432; do
            sleep 1
          done
          echo "PostgreSQL is ready."

      - name: Run tests
        run: mvn test --batch-mode

      - name: Scan for vulnerabilities
        run: mvn dependency-check:aggregate -Dformat=ALL -DfailBuildOnCVSS=7
        continue-on-error: true

      - name: Upload vulnerability scan report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: dependency-check-report
          path: target/dependency-check-report.html

      - name: Build with Maven
        run: mvn clean install --batch-mode

      - name: Package application
        run: mvn package --batch-mode

      - name: Print Docker image variables
        run: |
          echo "IMAGE_NAME: $IMAGE_NAME"
          echo "BUILD_NUMBER: $BUILD_NUMBER"

      - name: Build Docker image
        run: |
          docker build -t $IMAGE_NAME:$BUILD_NUMBER .
          docker tag $IMAGE_NAME:$BUILD_NUMBER $IMAGE_NAME:latest

      - name: Scan Docker image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: $IMAGE_NAME:$BUILD_NUMBER
          format: 'table'
          exit-code: '1'
          severity: 'HIGH,CRITICAL'
        continue-on-error: true

      - name: Upload Trivy scan report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: trivy-scan-report
          path: trivy-report.txt

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker image
        run: |
          docker push $IMAGE_NAME:$BUILD_NUMBER
          docker push $IMAGE_NAME:latest