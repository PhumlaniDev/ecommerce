name: test-build-package

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    services:
      postgres:
        image: postgres:latest
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        env:
          POSTGRES_DB: store
          POSTGRES_USER: phumlanidev
          POSTGRES_PASSWORD: Chr1st1@n9432

      sonarqube:
        image: sonarqube:latest
        ports:
          - 9000:9000
        options: >-
          --health-cmd "curl -f http://localhost:9000 || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/store
      SPRING_DATASOURCE_USERNAME: phumlanidev
      SPRING_DATASOURCE_PASSWORD: Chr1st1@n9432
      DOCKER_BUILDKIT: 1
      BUILD_NUMBER: ${{ github.run_number }}
      IMAGE_NAME: ${{ secrets.IMAGE_NAME }}
      USERNAME: ${{ github.actor }}
      PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
      SONARQUBE_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'zulu'

      - name: Cache SonarQube packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Wait for PostgreSQL to be ready
        run: |
          echo "Waiting for PostgreSQL to be ready..."
          until pg_isready -h localhost -p 5432; do
            sleep 1
          done
          echo "PostgreSQL is ready."

      - name: Run tests
        run: mvn test --batch-mode

      - name: Scan for vulnerabilities
        run: mvn org.owasp:dependency-check-maven:aggregate -Dformat=ALL -DfailBuildOnCVSS=7
        continue-on-error: true

      - name: Upload vulnerability scan report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: dependency-check-report
          path: target/dependency-check-report.html

      - name: Build with Maven
        run: mvn clean install --batch-mode

      - name: Package application
        run: mvn package --batch-mode

      - name: Print Docker image variables
        run: |
          echo "IMAGE_NAME: $IMAGE_NAME"
          echo "BUILD_NUMBER: ${{github.run_number}}"

      - name: Build Docker image
        run: |
          docker build -t aphumlanidev/techhive:${{github.run_number}} .
          docker tag aphumlanidev/techhive:${{github.run_number}} aphumlanidev/techhive:latest

      - name: Scan Docker image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: aphumlanidev/techhive:$BUILD_NUMBER
          format: 'table'
          exit-code: '1'
          severity: 'HIGH,CRITICAL'
        continue-on-error: true

      - name: Upload Trivy scan report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: trivy-scan-report
          path: trivy-report.txt

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker image
        run: |
          docker push aphumlanidev/techhive:${{github.run_number}}
          docker push aphumlanidev/techhive:latest

      - name: SonarQube Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn clean verify sonar:sonar \
          -Dsonar.projectKey=Ecommerce-app \
          -Dsonar.projectName='Ecommerce-app' \
          -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
          -Dsonar.login=$SONAR_TOKEN
